local function check_dir(self, message)
    local from = go.get_position()
    from.x = from.x + 32
    from.y = from.y - 32
    local to = from + self.direction_vectors[message["to_dir"]]
    local result = physics.raycast(from, to, { hash("default"), hash("crate") })
    local return_field =  "can_move_" .. message["to_dir"]
    local return_table = {}
    return_table[return_field] = false
    self.last_ok_dir = "0"
    if result == nil then
        return_table[return_field] = true
        msg.post(message[1], return_field, return_table)
        self.last_ok_dir = message["to_dir"]
        return
    end
    msg.post(message[1], return_field, return_table)
end

function init(self)
    self.direction_vectors = {}
    self.direction_vectors["left"] = vmath.vector3(-40, 0, 0)
    self.direction_vectors["right"] = vmath.vector3(40, 0, 0)
    self.direction_vectors["up"] = vmath.vector3(0, 40, 0)
    self.direction_vectors["down"] = vmath.vector3(0, -40, 0)
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("check_dir") then
        message["count"] = message["count"] + 1
        message[message["count"]] = sender
        check_dir(self, message)
    elseif message_id == hash("collision_response") then
        if message.other_group == hash("player") then
            local movement = vmath.normalize(self.direction_vectors[self.last_ok_dir]) * 64
            local p = go.get_position()
            self.prev_position = p
            go.set_position(p + movement)
        else
            -- pprint(message)
        end
    elseif message_id == hash("trigger_response") then
        msg.post("/game", "update_score", { add = message["enter"] })
        pprint(message)
    end
end
local function draw_line(from, to, color)
    if sys.get_engine_info().is_debug then
        msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = color })
    end
end

local function raycast_check(self, from, to_dir)
    local to = from + self.direction_vectors[to_dir]
    local result = physics.raycast(from, to, { hash("default"), hash("crate") })
    if result == nil then
        draw_line(from, to, vmath.vector4(1,0,0,1))
        return true
    end
    if result.group == hash("crate") then
        local stack = {}
        stack["count"] = 0
        stack["to_dir"] = to_dir
        msg.post(result.id, "check_dir", stack)
    end
    draw_line(from, result.position, vmath.vector4(0,1,0,1))
    return false
end

local function check_can_move(self)
    local from = go.get_position()
    from.x = from.x + 32
    from.y = from.y - 32
    self.can_move_left = self.can_move_left or raycast_check(self, from, "left")
    self.can_move_right = self.can_move_right or raycast_check(self, from, "right")
    self.can_move_up = self.can_move_up or raycast_check(self, from, "up")
    self.can_move_down = self.can_move_down or raycast_check(self, from, "down")
end

function init(self)
    msg.post(".", "acquire_input_focus")
    local rendercam = require "rendercam.rendercam"
    rendercam.follow("player")
    self.follow = true
    self.input = vmath.vector3()
    self.direction_vectors = {}
    self.direction_vectors["left"] = vmath.vector3(-40, 0, 0)
    self.direction_vectors["right"] = vmath.vector3(40, 0, 0)
    self.direction_vectors["up"] = vmath.vector3(0, 40, 0)
    self.direction_vectors["down"] = vmath.vector3(0, -40, 0)
end

function update(self, dt)
    self.can_move_left = false
    self.can_move_right = false
    self.can_move_up = false
    self.can_move_down = false
    if vmath.length_sqr(self.input) > 1 then
        self.input = vmath.normalize(self.input)
    end
    local movement = self.input * 64
    local p = go.get_position()
    self.prev_position = p
    go.set_position(p + movement)
    self.input = vmath.vector3()
    check_can_move(self)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("can_move_up") then
        self.can_move_up = self.can_move_up or message["can_move_up"]
    elseif message_id == hash("can_move_down") then
        self.can_move_down = self.can_move_down or message["can_move_down"]
    elseif message_id == hash("can_move_left") then
        self.can_move_left = self.can_move_left or message["can_move_left"]
    elseif message_id == hash("can_move_right") then
        self.can_move_right = self.can_move_right or message["can_move_right"]
    end
end

function on_input(self, action_id, action)
    if action_id == hash("up") and action.released and self.can_move_up then
        self.input.x = 0
        self.input.y = 1
    elseif action_id == hash("down") and action.released and self.can_move_down then
        self.input.x = 0
        self.input.y = -1
    elseif action_id == hash("left") and action.released and self.can_move_left then
        self.input.x = -1
        self.input.y = 0
    elseif action_id == hash("right") and action.released and self.can_move_right then
        self.input.x = 1
        self.input.y = 0
    else
        
    end
end
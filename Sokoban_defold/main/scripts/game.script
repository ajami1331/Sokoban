local function prepare_level(data)
    local levels = {}
    local i = 0
    for w in string.gmatch(data, "[^~]+") do
        local level_data = string.sub(w, 2)
        local level = {}
        local j = 0
        for r in string.gmatch(level_data, "[^\n]+") do
            j = j + 1
            level[j] = r
        end
        i = i + 1
        levels[i] = level
    end
    return levels
end

local function load_levels(self)
    local data, error = sys.load_resource("/assets/levels/default")
    if error == nil then
        self.levels = prepare_level(data)
        self.level_count = 0
        for _ in pairs(self.levels) do
            self.level_count = self.level_count + 1
        end
    else
        print(error)
    end
end

local function reset_game(self)
    for i = -55, 55, 1 do
        for j = -55, 55, 1 do
            tilemap.set_tile("#level_base", "layer", i, j, 0)
        end
    end
    for i = 1, self.crates["count"], 1 do
        go.delete(self.crates[i], true)
    end
end
local function init_level(self, level)
    reset_game(self)
    pprint(level)
    self.score = 0
    self.score_to_reach = 0
    self.crates["count"] = 0
    for r, v in pairs(level) do
        local c = 0
        for ch in v:gmatch"." do
            if ch == "#" then
                tilemap.set_tile("#level_base", "layer", r, c, 86)
            elseif ch == "." then
                tilemap.set_tile("#level_base", "layer", r, c, 43)
                self.score_to_reach = self.score_to_reach + 1
            elseif ch == "@" then
                local p = go.get_position("player")
                p.y = c * 64
                p.x = r * 64 - 64
                go.set_position(p, "player")
            elseif ch == "$" then
                local p = vmath.vector3()
                p.y = c * 64
                p.x = r * 64 - 64
                self.crates["count"] = self.crates["count"] + 1
                self.crates[self.crates["count"]] = factory.create("#cratefactory", p)
            else
                tilemap.set_tile("#level_base", "layer", r, c, 0)
            end
            c = c - 1
        end
    end
    msg.post("/game_gui", "level_count", { level_now = self.selected_level, total_level = self.level_count })    
    msg.post("/game_gui", "score_count", { score = self.score, score_to_reach = self.score_to_reach })
end

local function update_score(self, should_add)
    if should_add then
        self.score = self.score + 1
    else
        self.score = self.score - 1
    end
    msg.post("/game_gui", "score_count", { score = self.score, score_to_reach = self.score_to_reach })
    if self.score_to_reach == self.score then
        print("done")
        if self.selected_level < self.level_count then
            self.selected_level = self.selected_level + 1
            init_level(self, self.levels[self.selected_level])
        end
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    self.crates = {}
    self.crates["count"] = 0
    load_levels(self)
    self.selected_level = 1
    init_level(self, self.levels[self.selected_level])
end

function on_message(self, message_id, message, sender)
    if message_id == hash("update_score") then
        update_score(self, message["add"])
    elseif message_id == hash("reset_game") then
        init_level(self, self.levels[self.selected_level])
    end
end

function on_input(self, action_id, action)
    if action_id == hash("escape") and action.released then
        msg.post("/game_gui", "disable")
    else

    end
end
trigger: none
pr: none

pool:
  default

jobs:
- job: Build
  steps:
  - task: Docker@2
    displayName: "Build docker for web"
    inputs:
      containerRegistry: 'ajami1331.azurecr.io'
      repository: 'game.aljami.me-sokoban-raylib-c'
      command: 'buildAndPush'
      Dockerfile: '$(System.DefaultWorkingDirectory)/raylib_c/Dockerfile'
      tags: |
        $(Build.BuildId)
        latest

  - task: Docker@2
    displayName: "Build docker for crosscompile"
    inputs:
      containerRegistry: 'ajami1331.azurecr.io'
      repository: 'game.aljami.me-sokoban-crosscompile'
      command: 'build'
      Dockerfile: '$(System.DefaultWorkingDirectory)/raylib_c/Dockerfile.CrossCompile'
      tags: |
        $(Build.BuildId)
        latest

  - task: Bash@3 
    displayName: "Creating build staging directory structure"
    inputs:
      targetType: 'inline'
      script: |
        ls $(System.DefaultWorkingDirectory)
        ls $(Build.StagingDirectory)
        mkdir -p $(Build.StagingDirectory)/raylib_c/      
  
  - task: Bash@3
    displayName: "Get binary from docker container"
    inputs:
      targetType: 'inline'
      script: |
        $(System.DefaultWorkingDirectory)/raylib_c/scripts/get-package-from-docker-container.sh ajami1331.azurecr.io/game.aljami.me-sokoban-crosscompile $(Build.ArtifactStagingDirectory)/
        ls $(Build.ArtifactStagingDirectory)/releases/
        mv $(Build.ArtifactStagingDirectory)/releases/x86_64-windows.zip $(Build.ArtifactStagingDirectory)/releases/raylib-x86_64-windows.zip 
        mv $(Build.ArtifactStagingDirectory)/releases/i686-windows.zip $(Build.ArtifactStagingDirectory)/releases/raylib-i686-windows.zip 

  - task: DockerCompose@0
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Visual Studio Enterprise Subscription(fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0)'
      azureContainerRegistry: '{"loginServer":"ajami1331.azurecr.io", "id" : "/subscriptions/fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0/resourceGroups/araf-build-agents/providers/Microsoft.ContainerRegistry/registries/ajami1331"}'
      dockerComposeFile: '$(System.DefaultWorkingDirectory)/raylib_c/docker-compose.yml'
      projectName: 
      action: 'Lock services'
      outputDockerComposeFile: '$(Build.StagingDirectory)/raylib_c/docker-compose.yml'
  
  - task: CopyFiles@2
    displayName: 'Copy Files to artifact staging directory'
    inputs:
      SourceFolder: '$(Build.StagingDirectory)/raylib_c'
      Contents: 'docker-compose.yml'
      TargetFolder: $(Build.ArtifactStagingDirectory)/raylib_c

  - upload: $(Build.ArtifactStagingDirectory)/raylib_c
    artifact: raylib_c

  - upload: $(Build.ArtifactStagingDirectory)/releases
    artifact: releases

  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'GitHub - CLown1331'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: '$(Build.SourceVersion)'
      title: 'Sokoban: Raylib C'
      assets: '$(Build.ArtifactStagingDirectory)/releases/*'
      isDraft: true
      addChangeLog: false
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'

- deployment: VMDeploy
  dependsOn: Build
  displayName: web
  environment:
    name: prod
    resourceType: VirtualMachine
    tags: web
  strategy:
    rolling:
      maxParallel: 100%
      preDeploy:
        steps:
          - download: current
            artifact: raylib_c
          - script: echo downloaded built artifact
          - task: Docker@2
            inputs:
              containerRegistry: 'ajami1331.azurecr.io'
              command: 'login'
          
          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Visual Studio Enterprise Subscription(fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0)'
              azureContainerRegistry: '{"loginServer":"ajami1331.azurecr.io", "id" : "/subscriptions/fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0/resourceGroups/araf-build-agents/providers/Microsoft.ContainerRegistry/registries/ajami1331"}'
              dockerComposeFile: '$(Pipeline.Workspace)/raylib_c/docker-compose.yml'
              qualifyImageNames: false
              projectName: 
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'down'
              buildImages: false
      deploy:
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'ajami1331.azurecr.io'
              command: 'login'
          
          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Visual Studio Enterprise Subscription(fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0)'
              azureContainerRegistry: '{"loginServer":"ajami1331.azurecr.io", "id" : "/subscriptions/fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0/resourceGroups/araf-build-agents/providers/Microsoft.ContainerRegistry/registries/ajami1331"}'
              dockerComposeFile: '$(Pipeline.Workspace)/raylib_c/docker-compose.yml'
              qualifyImageNames: false
              projectName: 
              action: 'Run services'
              buildImages: false
      routeTraffic:
          steps:
          - script: echo routing traffic
      postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
      on:
        failure:
          steps:
          - script: echo Restore from backup! This is on failure
          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Visual Studio Enterprise Subscription(fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0)'
              azureContainerRegistry: '{"loginServer":"ajami1331.azurecr.io", "id" : "/subscriptions/fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0/resourceGroups/araf-build-agents/providers/Microsoft.ContainerRegistry/registries/ajami1331"}'
              dockerComposeFile: '~/game.aljami.me/raylib_c/docker-compose.yml'
              qualifyImageNames: false
              projectName: 
              action: 'Run services'
              buildImages: false
        success:
          steps:
          - script: |
              echo Notify! This is on success
              rm -rf ~/game.aljami.me/raylib_c
              cp -r $(Pipeline.Workspace)/raylib_c ~/game.aljami.me/raylib_c
              sudo service nginx restart